import socket
import re
import sys

def check_webserver(address, port, resource):
	if not resource.startswith('/'):
		resource = '/' + resource
	request_string = "GET %s HTTP/1.1\r\nHost: %s\r\n\r\n" % (resource, address)
	print 'HTTP request:'
	print '|||%s|||' % request_string

	s = socket.socket()
	print "Intentando conectar a %s al puerto %s" % (address, port)
	try:
		s.send(request_string)
		rsp = s.recv(100)
		print 'recibido 100 bytes de la respuesta HTTP'
		print '|||%s|||' % rsp
	except socket.error, e:
		print "La conexion a %s al puerto %s fallo:%s" % (address, port, e)
		return False
	finally:
		print "Cerrando la conexion..."
		s.close()
	lines = rsp.splitlines()
	print 'La primera linea de respuesta HTTP: %s' % lines[0]
	try:
		version, status, message = re.split(r'\s+', lines[0], 2)
		print 'Version: %s, Status: %s, Message: %s' % (version, status, message)

	except ValueError:
		print 'Fallo al dividir la linea de estado'
		return False
	if status in ['200', '301']:
		print 'Satisfactorio - el estatys fue %s' % status
		return True
	else:
		print 'Status was %s' % status
		return False

if __name__=='__main__':
	from optparse import OptionParser
	parser = OptionParser()
	parser.add_option("-a", "--address", dest="address", default='localhost',
	help="ADDRESS for webserver", metavar="ADDRESS")

	parser.add_option("-p", "--port", dest="port", type="int", default=80,
		help="PORT for webserver", metavar="PORT")

	parser.add_option("-r", "--resource", dest="resource", default='index.html',
		help="RESOURCE to check", metavar="RESOURCE")

	(options, args) = parser.parse_args()
	print 'options: %s, args: %s' % (options, args)
	check = check_webserver(options.address, options.port, options.resource)
	print 'check_webserver return %s' % check
	sys.exit(not check)
